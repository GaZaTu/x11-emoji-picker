name: Build

on:
  push:
    branches: [master]
    tags:
      - 'v*'
  pull_request:
    branches: [master]

env:
  DEBIAN_FRONTEND: noninteractive

jobs:
  build-artifact-x86_64:
    runs-on: ubuntu-latest
    container:
      image: ${{matrix.image}}
      options: --privileged
    strategy:
      matrix:
        image: ['ubuntu:23.04', 'ubuntu:22.10', 'ubuntu:22.04', 'ubuntu:20.04', 'ubuntu:18.04', 'debian:11', 'debian:10', 'debian:9', 'opensuse/leap:15.4', 'opensuse/leap:15.3', 'opensuse/leap:15.2', 'opensuse/leap:15.1', 'fedora:38', 'fedora:37', 'fedora:36', 'fedora:35']
      fail-fast: false

    steps:
      - name: Install dependencies (ubuntu & debian)
        if: startsWith(matrix.image, 'ubuntu') || startsWith(matrix.image, 'debian')
        run: apt update && apt install -y wget file dpkg-dev fuse git g++ cmake qtbase5-dev libicu-dev libxdo-dev

      - name: Install dependencies (debian:9)
        if: startsWith(matrix.image, 'debian:9')
        run: apt install qt5-default

      - name: Install dependencies (opensuse)
        if: startsWith(matrix.image, 'opensuse')
        run: zypper refresh && zypper install -y tar gzip wget rpm-build git gcc-c++ cmake libqt5-qtbase-devel libicu-devel xdotool-devel

      - name: Install dependencies (fedora & centos)
        if: startsWith(matrix.image, 'fedora') || startsWith(matrix.image, 'centos')
        run: dnf clean expire-cache && dnf install -y tar gzip wget rpm-build git gcc-c++ cmake qt5-qtbase-devel libicu-devel libxdo-devel

      - name: Install dependencies .AppImage
        if: startsWith(matrix.image, 'ubuntu:18.04')
        run: |
          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          cp ./linuxdeployqt-continuous-x86_64.AppImage /usr/bin/linuxdeployqt.AppImage

      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags
        continue-on-error: true

      - name: Set CPACK_GENERATOR to DEB (ubuntu / debian)
        if: startsWith(matrix.image, 'ubuntu') || startsWith(matrix.image, 'debian')
        run: |
          echo "CPACK_GENERATOR=DEB" >> $GITHUB_ENV

      - name: Set CPACK_GENERATOR to RPM (opensuse / fedora / centos)
        if: startsWith(matrix.image, 'opensuse') || startsWith(matrix.image, 'fedora') || startsWith(matrix.image, 'centos')
        run: |
          echo "CPACK_GENERATOR=RPM" >> $GITHUB_ENV

      - name: Create artifact version
        run: |
          VERSION_LATEST_TAG=$(git describe --match "v[0-9]*" --abbrev=0 HEAD | sed "s/v//")
          VERSION_TIMESTAMP=$(date +'%Y%m%d%H%M')
          VERSION_GIT_HASH=$(git rev-parse --short HEAD)
          VERSION=$VERSION_LATEST_TAG+git$VERSION_TIMESTAMP.$VERSION_GIT_HASH
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"
        continue-on-error: true

      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCPACK_GENERATOR=$CPACK_GENERATOR -DPACKAGE_VERSION=${{env.VERSION}} ..

      - name: Build
        run: |
          cd build
          make -j$(nproc)

      - name: Package
        run: |
          cd build
          make package

      - name: Package .AppImage
        if: "startsWith(matrix.image, 'ubuntu:18.04')"
        run: |
          cd build
          make appimage

      - name: Create artifact name
        run: |
          DISTRO_ID=$(grep "^ID=" "/etc/os-release" | sed "s/ID=//" | sed "s/\"//g")
          DISTRO_VERSION_ID=$(grep "^VERSION_ID=" "/etc/os-release" | sed "s/VERSION_ID=//" | sed "s/\"//g")
          ARTIFACT_NAME=x11-emoji-picker-x86_64
          ARTIFACT_NAME_WITH_DISTRO=$ARTIFACT_NAME-$DISTRO_ID-$DISTRO_VERSION_ID
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_WITH_DISTRO=$ARTIFACT_NAME_WITH_DISTRO" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_WITH_DISTRO=$ARTIFACT_NAME_WITH_DISTRO"

      - name: Rename artifact .deb (ubuntu / debian)
        if: startsWith(matrix.image, 'ubuntu') || startsWith(matrix.image, 'debian')
        run: |
          mv build/*.deb build/${{env.ARTIFACT_NAME_WITH_DISTRO}}.deb

      - name: Rename artifact .rpm (opensuse / fedora / centos)
        if: startsWith(matrix.image, 'opensuse') || startsWith(matrix.image, 'fedora') || startsWith(matrix.image, 'centos')
        run: |
          mv build/*.rpm build/${{env.ARTIFACT_NAME_WITH_DISTRO}}.rpm

      - name: Rename artifact .AppImage
        if: "startsWith(matrix.image, 'ubuntu:18.04')"
        run: |
          mv build/*.AppImage build/${{env.ARTIFACT_NAME}}.AppImage

      - name: Upload artifact .deb (ubuntu / debian)
        if: startsWith(matrix.image, 'ubuntu') || startsWith(matrix.image, 'debian')
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.ARTIFACT_NAME_WITH_DISTRO}}.deb
          path: build/*.deb
          if-no-files-found: error

      - name: Upload artifact .rpm (opensuse / fedora / centos)
        if: startsWith(matrix.image, 'opensuse') || startsWith(matrix.image, 'fedora') || startsWith(matrix.image, 'centos')
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.ARTIFACT_NAME_WITH_DISTRO}}.rpm
          path: build/*.rpm
          if-no-files-found: error

      - name: Upload artifact .AppImage
        if: startsWith(matrix.image, 'ubuntu:18.04')
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.ARTIFACT_NAME}}.AppImage
          path: build/*.AppImage
          if-no-files-found: error

  build-artifact-with-qemu:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        include:
          - arch: armv7
            distro: ubuntu18.04
          - arch: aarch64
            distro: ubuntu18.04

    steps:
      - name: Install git
        run: sudo apt update && sudo apt install -y git

      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags
        continue-on-error: true

      - name: Create artifact version
        run: |
          VERSION_LATEST_TAG=$(git describe --match "v[0-9]*" --abbrev=0 HEAD | sed "s/v//")
          VERSION_TIMESTAMP=$(date +'%Y%m%d%H%M')
          VERSION_GIT_HASH=$(git rev-parse --short HEAD)
          VERSION=$VERSION_LATEST_TAG+git$VERSION_TIMESTAMP.$VERSION_GIT_HASH
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"
        continue-on-error: true

      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{matrix.arch}}
          distro: ${{matrix.distro}}
          githubToken: ${{github.token}}
          dockerRunArgs: |
            --volume "$PWD:/project"
          env: |
            VERSION: ${{env.VERSION}}
          shell: /bin/sh
          install: |
            apt update && apt install -y wget file dpkg-dev fuse git g++ cmake qtbase5-dev libicu-dev libxdo-dev

            wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
            chmod a+x linuxdeployqt-continuous-x86_64.AppImage
            cp ./linuxdeployqt-continuous-x86_64.AppImage /usr/bin/linuxdeployqt.AppImage
          run: |
            cd /project

            # Configure
            mkdir -p build
            cd build
            cmake -DCMAKE_BUILD_TYPE=Release -DPACKAGE_VERSION=${{env.VERSION}} ..

            # Build
            make -j$(nproc)

            # Package .AppImage
            make appimage

      - name: Create artifact name
        run: |
          DISTRO_ID=$(grep "^ID=" "/etc/os-release" | sed "s/ID=//" | sed "s/\"//g")
          DISTRO_VERSION_ID=$(grep "^VERSION_ID=" "/etc/os-release" | sed "s/VERSION_ID=//" | sed "s/\"//g")
          ARTIFACT_NAME=x11-emoji-picker-${{matrix.arch}}
          ARTIFACT_NAME_WITH_DISTRO=$ARTIFACT_NAME-$DISTRO_ID-$DISTRO_VERSION_ID
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_WITH_DISTRO=$ARTIFACT_NAME_WITH_DISTRO" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_WITH_DISTRO=$ARTIFACT_NAME_WITH_DISTRO"

      - name: Rename artifact .AppImage
        run: |
          mv build/*.AppImage build/${{env.ARTIFACT_NAME}}.AppImage

      - name: Upload artifact .AppImage
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.ARTIFACT_NAME}}.AppImage
          path: build/*.AppImage
          if-no-files-found: error

  create-nightly-release:
    needs: [build-artifact-x86_64, build-artifact-with-qemu]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Create nightly
        id: create_release
        uses: pajlada/create-release@v2.0.3
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: nightly-build
          release_name: Nightly Release
          body: |
            Nightly Build
          prerelease: true

      - name: Download artifacts
        id: download_artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Display downloaded artifacts
        run: ls -R ${{steps.download_artifacts.outputs.download-path}}

      - name: Upload release assets
        uses: GaZaTu/release-asset-action@v3
        with:
          pattern: "${{steps.download_artifacts.outputs.download-path}}/**/*"
          github-token: ${{secrets.GITHUB_TOKEN}}
          release-url: ${{steps.create_release.outputs.upload_url}}

  create-release:
    needs: [build-artifact-x86_64, build-artifact-with-qemu]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Create release
        id: create_release
        uses: pajlada/create-release@v2.0.3
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{github.ref}}
          release_name: ${{github.ref}}
          body: |
            ------

      - name: Download artifacts
        id: download_artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Display downloaded artifacts
        run: ls -R ${{steps.download_artifacts.outputs.download-path}}

      - name: Upload release assets
        uses: GaZaTu/release-asset-action@v3
        with:
          pattern: "${{steps.download_artifacts.outputs.download-path}}/**/*"
          github-token: ${{secrets.GITHUB_TOKEN}}
          release-url: ${{steps.create_release.outputs.upload_url}}
